local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
q()
x=10
x
x
x=10
x
q=c(1,3)
q
y<-c(2,4,6,8)
y
length(q)
length(y)
length(y)
q=c(1:4)
q
z=q+y
f=4?5
f=4/5
4/5
z1=print(4**5)
print(z1)
z2=(4**5)
print(z2)
aa="hi"
aa
length(aa)
bb = print(635.2+985.4)
bb
class(i)
class(i)
i <- TRUE
class(i)
i <- "TRUE"
class(i)
i<-"302"
i = 3+6i
class(i)
getwd()
class(i)
setwd("C://Course_material//Modules//Foundation_Final")
setwd("C://Course_material//Modules//Foundation_Final//")
BMI = data.frame(gender =c("Male","Male","Female"),
weight = c(40,30,60),
height = c(150,140.4,160),
age = (42,37,28))
BMI = data.frame(gender =c("Male","Male","Female"),
weight = c(40,30,60),
height = c(150, 140.4, 160),
age = (42,37,28))
BMI = data.frame(gender =c("Male","Male","Female"),
weight = c(40,30,60),
height = c(150, 140, 160),
age = (42,37,28))
BMI = data.frame(gender =c("Male","Male","Female"),
weight = c(40,30,60),
height = c(150.1, 140, 160),
age = (42,37,28))
BMI = data.frame(gender =c("Male","Male","Female"),
weight = c(40,30,60),
height = c(150.1, 140, 160),
age = (42,37,28))
BMI = data.frame(gender =c("Male","Male","Female"),
weight = c(40,30,60),
height = c(150.1, 140, 160),
age = c(42,37,28))
View(BMI)
print(BMI)
View(BMI)
summary(BMI)
summary(BMI$age)
summary(BMI$age$height)
help("summary")
?summary
mean(BMI$height)
median(BMI$gender)
median(BMI$age)
x=c(12,4,5,6,18,-14,-5,-7)
plot(x)
x=c(12,4,5,6,18,-14,-5,-7)
r.mean = <- mean(x)
result.mean = <- mean(x)
print(result.mean)
result.mean  <- mean(x)
print(result.mean)
barplot(x)
x=10
ar <- array(c("green","red"),dim = c(3,3,2))
print(ar)
ar <- array(c("green","red"),dim = c(4,4,3))
print(ar)
column <- c("c1","c2","c3")
row <- c("r1","r2","r3")
matrix <- c("m1","m2")
ar <- array(c("green","red"),dim = c(3,3,2), dimnames = list(row,column,matrix))
print(ar)
print(ar[1, ,3])
print(ar[1, ,2])
print(ar[1,2,2])
vector1 <- c(1,2,3)
vector2 <- c(3,4,5,6,7,8)
array1 <- array(c(vector1,vector2),dim = c(3,3,2))
print(array1)
vector3 <- c(3,2,1)
vector4 <- c(8,7,6,5,4,3)
array2 <- array(c(vector1,vector2),dim = c(3,3,2))
print(array1)
print(array2)
matrix1 <- array1[,,2]
matrix2 <- array2[,,2]
print(matrix1)
print(array1)
print(matrix1)
vector2 <- c(9,4,5,6,7,8)
print(array1)
array1 <- array(c(vector1,vector2),dim = c(4,4,3))
print(array1)
array2 <- array(c(vector1,vector2),dim = c(4,4,3))
matrix1 <- array1[,,2]
matrix2 <- array2[,,2]
print(array1)
print(matrix1)
print(array2)
print(matrix2)
print(matrix1)
result <- matrix1+matrix2
print(result)
array2 <- array(c(vector3,vector4),dim = c(4,4,3))
print(array1)
print(matrix1)
print(array2)
print(matrix2)
print(matrix1)
array1 <- array(c(vector1,vector2),dim = c(4,4,3))
vector1 <- c(1,2,3)
vector2 <- c(9,4,5,6,7,8)
array1 <- array(c(vector1,vector2),dim = c(4,4,3))
vector3 <- c(3,2,1)
vector4 <- c(8,7,6,5,4,3)
array2 <- array(c(vector3,vector4),dim = c(4,4,3))
matrix1 <- array1[,,2]
matrix2 <- array2[,,2]
print(array1)
print(matrix1)
print(array2)
print(matrix2)
print(matrix1)
result <- matrix1+matrix2
print(result)
library(tseries)
library(forecast)
library(car)
setwd("C:\\R\\Linear\\car-consume")
car.data <- read.csv("measurements2.csv")
##car.data <- subset(car.data, select = -c(6,11,12))
View(car.data)
car.data$specials <-  ifelse(car.data$specials == "",0, as.numeric(car.data$specials))
car.data$gas_type<-as.numeric(car.data$gas_type)
car.data$refill.gas <- ifelse(car.data$refill.gas == "",0,as.numeric(car.data$refill.gas))
car.data$refill.liters <- ifelse(is.na(car.data$refill.liters),0,car.data$refill.liters)
car.data$temp_inside <- ifelse(is.na(car.data$temp_inside),0,car.data$temp_inside)
View(car.data)
set.seed(70)
temp.car <- sample(c("train","test"), nrow(car.data),replace = T , prob = c(.8,.2))
temp.car
train.car <- car.data[temp.car == "train",]
test.car <- car.data[temp.car == "test",]
cor(car.data)
carmodel1 <- lm(consume ~.,train.car)
summary(carmodel1)
vif(carmodel1)
set.seed(23)
temp.car <- sample(c("train","test"), nrow(car.data),replace = T , prob = c(.8,.2))
temp.car
train.car <- car.data[temp.car == "train",]
test.car <- car.data[temp.car == "test",]
cor(car.data)
carmodel1 <- lm(consume ~.,train.car)
summary(carmodel1)
vif(carmodel1)
set.seed(10)
temp.car <- sample(c("train","test"), nrow(car.data),replace = T , prob = c(.8,.2))
temp.car
train.car <- car.data[temp.car == "train",]
test.car <- car.data[temp.car == "test",]
cor(car.data)
carmodel1 <- lm(consume ~.,train.car)
summary(carmodel1)
vif(carmodel1)
set.seed(100)
temp.car <- sample(c("train","test"), nrow(car.data),replace = T , prob = c(.8,.2))
temp.car
train.car <- car.data[temp.car == "train",]
test.car <- car.data[temp.car == "test",]
cor(car.data)
carmodel1 <- lm(consume ~.,train.car)
vif(carmodel1)
summary(carmodel1)
carmodel2 <- lm(consume ~ +ï..distance+speed+temp_outside+temp_inside+gas_type+AC,train.car)
summary(carmodel2)
carmodel1 <- lm(consume ~.,train.car)
summary(carmodel1)
vif(carmodel1)
carmodel2 <- lm(consume ~ +ï..distance+speed+temp_outside+temp_inside+gas_type+AC,train.car)
summary(carmodel2)
library(tseries)
library(forecast)
library(car)
setwd("C:\\R\\Linear\\car-consume")
measurement <- read.csv("measurements2.csv")
colSums(measurement)
#replacing space with '0'
#measurement.data$temp_inside[measurement.data$temp_inside=="NA"] <-"0"
measurement$specials <- ifelse(measurement$specials == "" ,0,as.numeric(measurement$specials))
measurement$temp_inside<-ifelse(is.na(measurement$temp_inside),0,measurement$temp_inside)
measurement$gas_type <-as.numeric(measurement$gas_type)
measurement$refill.gas <-ifelse(measurement$refill.gas == "",0,as.numeric(measurement$refill.gas))
measurement$refill.liters <-ifelse(is.na(measurement$refill.liters),0,measurement$refill.liters)
View(measurement)
set.seed(23)
temp.measurement <- sample(c("train","test"), nrow(measurement),replace = T , prob = c(.8,.2))
temp.measurement
train.measurement <- measurement[temp.measurement == "train",]
test.measurement <- measurement[temp.measurement == "test",]
cor(measurement)
measurementmodel1 <- lm(consume ~.,train.measurement)
summary(measurementmodel1)
vif(measurementmodel1)
summary(measurementmodel1)
